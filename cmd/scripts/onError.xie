// 设置错误处理代码块为标号handler1处开始的代码块
// onError指令后如果不带参数，表示清空错误处理代码块
// set error handler to the code block at label :handler1
// onError instruction with no parameters will clear the defined error handlers
onError :handler1

// 故意获取一个超出数组长度索引的结果，将产生运行时异常
// trigger an error on purpose
var $array1 array
getArrayItem $item $array1 1

// 此处代码正常情况应执行不到
// 但错误处理代码块将演示如何返回此处继续执行
// the code below will not run normally
// but the error handler will redirect to this label
:next1

// 输出一个提示信息
// output a piece of message for reference
pln "calculation completed(and the error handler)"

// 退出程序
// terminate the program
exit

// 错误处理代码块
// error handler
:handler1
    // 发生异常时，谢语言将会将出错时出错代码的行号、错误提示信息和详细代码运行栈信息分别存入全局变量$lastLineG, $errorMessageG, $errorDetailG
    // 错误处理代码块可以根据这几个值进行相应显示或其他处理
    // the error info will in 3 global variables: $lastLineG, $errorMessageG, $errorDetailG
    // error handler can handle them

   // 输出错误信息
    // output the message
    pl "error occurred while running to line %v: %v, detail: %v" $lastLineG $errorMessageG $errorDetailG

    // 跳转到指定代码位置继续执行
    // jump to the specific position(label)
    goto :next1





