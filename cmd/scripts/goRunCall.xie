// 因为前面有函数定义，所以要加上goto指令跳转到主函数（标号:main处）执行
// 否则顺序执行下面的函数了
goto :main

// 定义内嵌在代码中的并发处理函数
// 并发处理函数也是从变量$inputL接收输入参数，但无需输出$outL参数
// 内嵌函数一般第一条指令和最后一条指令都要加上标号，分别表示函数体的开始与结束

:goFunc1Start
    // 从$inputL中获取三个传入的参数
    [] $arg1 $inputL 0
    [] $arg2 $inputL 1
    [] $arg3 $inputL 2

    // 查看这几个参数值
    pln arg1= $arg1
    pln arg2= $arg2
    pln "*arg3=" *$arg3

    // 第三个参数是个指针/引用，将其解引用取到其值
    unref $arg3v $arg3

    // 无限循环演示不停修改变量值，查看对主线程变量的影响
    // loop1是用于循环的标号
    :loop1
        // 输出字符串sub和变量arg2中的值
        pln sub $arg1 $arg2 *$arg3 $a $b

        // $arg1中是传值传入的全局变量$a，在并发线程内修改其值并不影响$a的值
        inc $arg1

        // 在goRunCall调用的并发函数中，可以访问主线程中的全局变量
        inc $a

        // $b是在主线程的局部变量（二级函数内定义的）
        // 在并发线程内并没有声明，因此第一次取到该值是undefined
        // 后续因为inc指令会自动以非数值为-1而进行计算，后面会逐个加1
        // 但可以看出与主线程子函数中的$b是同名而实际不同的变量
        inc $b

        // 将传入的引用变量p进行计算和赋值，可以在主线程中看出是有作用的
        // assignRef指令是将数值赋值给指针/引用变量指向的数值存储空间
        add $arg3v $arg3v #i2
        assignRef $arg3 $arg3v

        // 休眠1.6秒
        sleep #f1.6

        :goFunc1End
        // 跳转到标号loop1（无限循环）
        goto :loop1


// 主线程（主函数）
:main

// 给变量a赋值浮点数3.6
// 变量a作为主函数中定义的全局变量
// 在goRunCall指令启动的线程中是可以被访问和修改的
// 非主函数中定义的变量则不可以在goRunCall指令启动的线程中访问
assign $a #f3.6

// 也可以传递指针/引用，在并发函数中用assignRef指令来赋值
// 这里新建了一个整数的引用，并将其内容赋值为99，以便在线程中对照
// 对引用变量指向的内容赋值是用assignRef指令
new $p int
assignRef $p #i99

// 输出当前变量a的值作参考
// 获取引用变量的内容值直接在变量前加星号即可
pl "a=%v, *p=%v" $a *$p

// 调用func2处的函数
// 这是为了演示在二级函数中定义的局部变量$b在并发函数中无法访问
call $drop :func2

exit

// 运行在主线程中的二级函数func2
:func2

// 赋值（自动声明一个局部变量）一个局部字符串变量$b
assign $b "abc123"

// 用goRunCall指令调用并发函数，除结果参数外，前两个参数是函数的开始和结束标号
// 后面是传入的参数
goRunCall $rs :goFunc1Start :goFunc1End $a $b $p

// 主线程中循环5次（之间休眠1秒）并输出变量值进行监测
range #i6 :loop2 :+1

exit

// 主线程循环体
// 监测几个变量的值
// *$p表示取引用变量$p中指向的实际数值
:loop2

getIter $i $v

pln mainLoop $v $a $b *$p

// 休眠1秒
sleep #f1.0

// 继续循环
continue