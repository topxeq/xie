// 定义一个列表变量list1
// Define a list variable list1
var $list1 list

// 查看列表对象，此时应为空的列表
// View the list object, which should be an empty list at this time
plo $list1

// 给列表list1中添加一项整数8
//Add an integer 8 to list1
addItem $list1 #i8

// 给列表list1中添加一项浮点数12.7
// Add a floating point number 12.7 to the list list1
addItem $list1 #f12.7

// 再次查看列表list1中内容，此时应有两项
// Review the contents of list 1 again, and there should be two items at this time
plo $list1

// 用赋值的方法直接将一个数组赋值给列表变量list2
// #号后带大写的L表示后接JSON格式表达的数组
// Directly assign an array to the list variable list2 using the assignment method
// The L with uppercase after the # sign represents an array followed by JSON format expression
assign $list2 #L`["abc", 2, 1.3, true]`

// 输出list2进行查看
// Output list2 for viewing
plo $list2

// 查看list2的长度（即其中元素的个数）
// View the length of list2 (i.e. the number of elements in it)
len $list2

pln length= $tmp

// 获取列表list1中序号为0的项（列表序号从零开始，即第1项）
// 结果将入栈
// Get the item with sequence number 0 in list 1 (the list sequence number starts from zero, which is the first item)
// The result will be stacked
getItem $push $list1 #i0

// 获取list2中的序号为1的项，结果放入变量a中
// Obtain the item with sequence number 1 in list2 and place the result in variable a
getItem $a $list2 #i1

// 将变量a转换为整数（原来是浮点数）并存回a中
// Convert variable a to an integer (originally a floating point number) and return it to a
convert $a $a int

// 查看变量a中的值
// View the value in variable a
plo $a

// 将弹栈值（此时栈顶值是列表list1中序号为0的项）与变量a相加
// 结果压栈
// Add the stack value (where the top value of the stack is the item with number 0 in list 1) to variable a
// Result Stacking
add $push $pop $a

// 查看弹栈值
// Check the stack top value
plo $pop

// 将列表list1与列表list2进行合并
// 结果放入新的列表变量list3中
// 注意，如果没有指定结果参数（省略第一个，此时应共有2个参数），将把结果存回list1
// 相当于把list1加上了list2中所有的项
// Merge list 1 with list 2
// Place the results in the new list variable list3
// Note that if no result parameter is specified (omitting the first one, there should be a total of 2 parameters), the result will be saved back to list1
// Equivalent to adding all the items in list1 and list2
addItems $list3 $list1 $list2

// 查看列表list3的内容
// View the contents of list 3
plo $list3

// 将list3进行切片，截取序号1（包含）至序号5（不包含）之间的项
// 形成一个新的列表，放入变量list4中
// Slice list3 and extract items between numbers 1 (inclusive) and 5 (exclusive)
// Form a new list and place it in variable list4
slice $list4 $list3 #i1 #i5

// 查看列表list4的内容
// View the contents of list 4
plo $list4

// 循环遍历列表list4中所有的项，对其调用标号range1开始的代码块
// 该代码块必须使用continue指令继续循环遍历
// 或者break指令跳出循环遍历
// 遍历完毕或者break跳出遍历后，代码将继续从rangeList指令的下一条指令继续执行
// 遍历每项时，range指令指向的遍历体代码应用getIter指令获得当前当前序号值（从0开始）和遍历项的值
// 并保证用continue进行继续遍历，遍历完毕后将默认返回range指令后的下一条指令继续执行
// Loop through all items in list 4 and call the code block starting with the label range1 on them
// This code block must continue to loop through using the continue instruction
// Or break instruction jumps out of loop traversal
// After the traversal is completed or the break jumps out, the code will continue to execute from the next instruction in the rangeList instruction
// When traversing each item, the range instruction points to the traversal body code and applies the getIter instruction to obtain the current ordinal value (starting from 0) and the value of the traversal item
// And ensure to continue the traversal using continue. After the traversal is completed, the next instruction after the range instruction will be returned by default to continue execution
range $list4 :range1

// 删除list4中序号为2的项(此时该项为整数2)
// Delete the item with sequence number 2 in list 4 (at this point, the item is an integer 2)
deleteItem $list4 #i2

// 再次删除list4中序号为2的项(此时该项为浮点数1.3)
// Delete the item with No. 2 in list4 again (at this time, the item is floating point 1.3)
deleteItem $list4 #i2

// 修改list4中序号为1的项为字符串“烙红尘”
// Modify the item with serial number 1 in list 4 to the string "烙红尘"
setItem $list4 #i1 烙红尘

// 再次删除list4中序号为0的项(此时该项为浮点数12.7)
// Delete the item with serial number 0 in list4 again (at this time, the item is a floating point 12.7)
deleteItem $list4 #i0

// 再次查看列表list4的内容
// 此时应只剩1项字符串“烙红尘”
// Review the contents of list 4 again
// At this point, there should only be one string left, "烙红尘"
plo $list4

// 结束程序的运行
// Exit the program
exit

// 标号range1的代码段，用于遍历列表list4
// Code snippet labeled range1 for traversing list list4
:range1
    // 获得遍历序号和遍历值分别放入变量i和v中
    // Obtain the traversal sequence number and traversal value and place them in variables i and v, respectively
    getIter $i $v

    // 判断i值是否小于3，结果存入$tmp
    // Determine if the value of i is less than 3, and store the result in $tmp
    < $i #i3

    // 如果是则跳转到next1（继续执行遍历代码）
    // If true, jump to label next1 (continue the iterating code)
    if $tmp :next1

        // 否则跳出循环遍历
        // Otherwise, skip the loop traversal
        break

    // 标号next1
    // Label next1
    :next1

    // 输出提示信息
    // output the info
    pl `第%v项是%v` $i $v

    // 继续循环遍历，如欲跳出循环遍历，可以使用break指令
    // Continue loop traversal, if you want to break out of the loop traversal, you can use the break instruction
    continue