// 将整数15赋值给变量a
// assign integer value to variable $a
assign $a #i15

// 此时如果执行指令 add $result $a #f3.6
// 将会出现运行时错误
// 应为加法运算的两个数值类型不一致
// 一个是整数，一个是浮点数
// at this time, if we execute the command "add $result $a # f3.6"
// a runtime error will occur
// the two numeric types expected for addition operation are inconsistent
// one is an integer and the other is a floating point number

// 输出变两个的数据类型和数值进行查看
// pl指令相当于其他语言中的printf函数，后面再多输出一个换行符\n
// Output the data type and value of two variables to view
// pl instruction is equivalent to the printf function in other languages, followed by an additional newline character "\n"
pl `a(%T)=%v` $a $a

// 将变量a转换为浮点数类型
// 结果将压入栈中
// convert the variable $a to float point number
// and push the result into the stack
convert $push $a float

// 输出栈顶值（不弹栈）的类型和数值查看
// output the top value of the stack(no pop) for reference
pl `a(%T)=%v` $peek $peek

// 将栈顶值与浮点数3.6相加后压栈
// pop the stack and add it with float point number 3.6
// push the result to the stack
add $push $pop #f3.6

// 输出栈顶值查看类型和结果
// 注意第一个参数使用$peek是为了不弹栈
// 以保证第二个参数$pop操作时还能取到该值
// output the stack top value to view the type and operation result
// note that $peek is used for the first parameter to avoid stack pop action
// to ensure that the value of the second parameter $pop can be obtained during operation
pl "result=(%T)%v" $peek $pop