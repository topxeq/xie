// 新建一个字符串缓冲区用于调试输出
// 实际系统中可取消此功能
// Create a new string buffer for debugging output
// This function can be cancelled in the actual system
new $debufG strBuf

// 跳转到主函数处执行
// Jump to the main function for execution
goto :main

// 几个出错时的处理分支
// 每个分支一般对应一种错误类型
// Several processing branches in case of errors
// Each branch generally corresponds to one error type
:fail1
    // 拼装错误信息字符串
    // Assembly error message string
    spr $tmps "empty %v" $fail1Reason

    // 生成JSON格式的错误对象
    // Generate JSON formatted error object
    genResp $result $requestG "fail" $tmps

    // 将其写入到HTTP请求响应中
    // Write it into the HTTP request response
    writeResp $responseG $result

    // 退出整个HTTP请求响应脚本
    // Exit the entire HTTP request response script
    exit

:fail2
    spr $tmps "require SSL"

    genResp $result $requestG "fail" $tmps

    writeResp $responseG $result

    exit

:fail3
    spr $tmps "%v" $fail1Reason

    genResp $result $requestG "fail" $tmps

    writeResp $responseG $result

    exit

// 通用错误处理函数
// General error handling function
:handler1
    spr $failMsg "internal error(line %v): %v（%v）" $lastLineG $errorMessageG $errorDetailG

    genResp $result $requestG "fail" $failMsg debuf $debufG

    writeResp $responseG $result

    exit

// 主函数开始
// Start of main function
:main

// 设定错误处理函数
// 所有未经处理的错误都将转入该函数进行处理
// Set error handling function
// All unhandled errors will be transferred to this function for processing
onError :handler1

// 默认返回TX_END_RESPONSE_XT，表示HTTP响应将不再输出（除了本脚本中已经输出的之外）
// Default return TX_END_RESPONSE_XT, indicating that the HTTP response will no longer be output (except for the content already output in this script)
= $outG "TX_END_RESPONSE_XT"

// 设置响应头中的字段
// Set the fields in the response header
setRespHeader $responseG "Content-Type" "text/json; charset=utf-8"

// 设置响应头状态为200，表示HTTP响应成功
// Set the response header status to 200, indicating successful HTTP response
writeRespHeader $responseG #i200

pl "[%v] %v params: %v" @'{nowStr}' $reqNameG $paraMapG

// 获取HTTP请求中的URL、协议等信息，可用于强制SSL判断等场景
// Obtain URL, protocol, and other information from HTTP requests, which can be used to enforce SSL judgment and other scenarios
mb $urlT $requestG URL

# pl urlT:%#v $urlT

mb $schemeT $requestG Scheme

# pln schemeT $schemeT

mb $protoT $requestG Proto

# pln protoT $protoT

mb $tlsT $requestG TLS

isNil $tlsT

// 打开下面的注释将强制要求此请求通过https访问
// if $tmp :fail2

# plv $requestG

// 获取请求参数中的appCode，u，p和secret，分别表示应用代码、用户名、密码和密钥
// 可以通过这些参数来进行鉴权，决定是否要授予令牌
// 本例中只通过判断密码来进行令牌授权
// 密钥是用于加密令牌的，可以为空值，将使用默认密钥
// Obtain the appCode, u, p, and secret in the request parameters, representing the application code, username, password, and key, respectively
// These parameters can be used for authentication to determine whether to grant a token
// In this example, token authorization is only performed by determining the password
// The key is used for encrypting tokens and can be empty, and then the default key will be used
getMapItem $appCode $paraMapG app

writeStr $drop $debufG @'"appCode: " + $appCode'

= $fail1Reason appCode

if @`$appCode == $undefinedG` :fail1

getMapItem $user $paraMapG u

= $fail1Reason user

if @`{isUndef $tmp $user}` :fail1

getMapItem $password $paraMapG p ""

= $fail1Reason password

if @`($password == "")` :fail1

= $fail1Reason "password not match"

if @`($password != "123456")` :fail3

getMapItem $secret $paraMapG secret ""

writeStr $_ $debufG @`(" -secret=" + $secret)`

// 生成令牌
// ifThenElse指令相当于JavaScript语言中的三元操作符（类似 a?true:false)
// Generate Token
// The ifThenElse instruction is equivalent to a ternary operator in JavaScript language (similar to a? True: false)
genToken $result $appCode $user admin @'{ifThenElse ($secret == "") "" ("-secret=" + $secret)}'

// 生成HTTP请求的响应字符串，JSON格式
// Generate a response string for HTTP requests in JSON format
genResp $result $requestG "success" $result debuf $debufG

// 写入HTTP响应
// Write HTTP response
writeResp $responseG $result

exit

