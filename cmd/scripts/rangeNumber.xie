// 本例展示对整数或小数使用range指令遍历
// shows the range/iterate action of integer and float

// range指令后带一个整数则表示遍历整数5，循环体代码在标号label1处
// 跳出循环的标号在第三个，但可以省略，默认为“:+1”，即跳转到下一条指令继续执行
// 将依次输出每个循环序号和遍历值
// 遍历整数5相当于依次取0, 1, 2, 3, 4共5个遍历值
// 对应循环序号是0, 1, 2, 3, 4
// range integer 5
// range value for each round will be: 0, 1, 2, 3, 4
// range index will be: 0, 1, 2, 3, 4
range #i5 :label1

pln

// range指令后带两个整数表示范围遍历，此时跳出循环的标号不可省略
// 然后跟随遍历范围中的起始值，range后的数是结束值（不含）
// 这里是遍历整数2到5，也就是
// 依次取2, 3, 4共3个遍历值
// 对应循环序号是0, 1, 2
// range from 2 to 5
// range value for each round will be: 2, 3, 4
// range index will be: 0, 1, 2
// here the break label ":+1"(or other label) could not be omitted
range #i5 :label1 :+1 #i2

pln

// range指令后带三个整数表示指定步长的范围遍历
// 这里是遍历整数20到50，步长为5，也就是
// 依次取20, 25, 30, 35, 40, 45共6个遍历值
// 对应循环序号是0, 1, 2, 3, 4, 5
// 因此，完整的range指令应该类似：range 需遍历的值 继续遍历循环标号 跳出遍历循环标号 起始值 结束值（不含） 步长
// 对于数字的遍历，“需遍历的值”应于“结束值”一致，对于数组等的遍历，需遍历的值为数组等对象，起始值、结束值为整数
// range from 20 to 50, step 5(if not set, the default step is always 1)
// range value for each round will be: 20, 25, 30, 35, 40, 45
// range index will be: 0, 1, 2, 3, 4, 5
range #i50 :label1 :+1 #i20 #i50 #i5

pln

// 浮点数的遍历与整数类似，注意如果不指定步长，默认步长为1.0
// range of float value is the same as integer, if the step is not set, the default step is 1.0
// range value for each round will be: 0.2, 0.7, 1.2
// range index will be: 0, 1, 2
range #f1.6 :label1 :+1 #f0.2 #f1.6 #f0.5

pln

// 本例中步长为负值
// 将遍历12, 9, 6, 3, 0这5个值
// 并输出60除以这些值的结果
// 遍历过程中遇到为0的遍历值时，因为除数为零属于错误，会检查出错误信息并继续执行
// the step could be a negative value
// the last parameter is direction: 0(default): >=, 1: <=, 2: >, 3: <, 4: ==, means the condition operator to terminate the range loop
// in most cases, for positive range(0, 1, 2...), it should be 0, for negative range(9, 8, 7...), it will be 1
// range value for each round will be: 12, 9, 6, 3, 0
// the output will be 60 / range value
// range index will be: 0, 1, 2, 3, 4
// when range to value of 0, will trigger the error handler
range #i-9 :label2 :+1 #i12 #i-9 #i-3 1

exit

:label1
    // 遍历与循环一样，用getIter指令获取序号值与遍历值
    // get the range index and value
    getIter $i $v

    pln $i -> $v

    continue

:label2

    getIter $i $v

    div $rs1 #i60 $v

    ifErrX $rs1 :+1 :+3
        pl "failed to cal (60 / %v): %v" $v $rs1
        continue     
    
    pl "%v -> 60 / %v = %v" $i $v $rs1

    continue

