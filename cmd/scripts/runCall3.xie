// 本例继续演示用runCall指令调用函数的方法
// This example continues to demonstrate the method of calling functions using the runCall instruction

// 压栈准备传入的函数的第一个参数
// Push the stack to prepare the first parameter of the incoming function
push #f1.6

// runCall指令将代码块看做封装函数进行调用
// 结果参数不可省略，之后第1个参数表示函数代码
// 之后可以跟多个指令参数，表示传入这个函数内的参数
// 这些参数在函数代码内可以通过列表类型的变量inputL访问
// 下面的这个函数的功能是简单的加法运算
// The runCall instruction treats code blocks as encapsulated functions for calling
// The result parameter cannot be omitted, and the first parameter after it represents the function code
// Afterwards, multiple instruction parameters can be used to represent the parameters passed into this function
// These parameters can be accessed within the function code through the variable inputL of the list type
// The function below is for simple addition operations
runCall $rs `
    // 弹栈第一个参数
    // pop out the first parameter
    pop $arg1

    // 获取传入的参数作为加法计算的第二个参数
    // Obtain the passed in parameter as the second parameter for addition calculation
    getArrayItem $arg2 $inputL 0

    // 输出两个参数检查
    // Output two parameter checks
    pln arg1= $arg1
    pln arg2= $arg2

    // 将两个参数相加，结果压栈
    // Add two parameters and stack the result
    add $push $arg1 $arg2

    // 输出栈顶值检查
    // Output stack top value check
    pln $peek

    // runCall函数因为与调用者在同一个虚拟机中运行，所以返回值可以通过堆栈返回
    // 也可以通过outL变量来返回值
    // The runCall function runs in the same virtual machine as the caller, so the return value can be returned through the stack
    // You can also return values through the outL variable
    assign $outL $peek
` #f2.3

// 输出函数返回值
// Output function return value
pln "result:" $rs

// 输出从堆栈返回的值，这个例子里是一样的
//Output the value returned from the stack, which is the same in this example
pln "result:" $pop