// load code string from module file 1
// getCurDir $rs1
// joinPath $path1 $rs1 `scripts` `module1.qx`

loadText $code1 `scripts/module1.qx`

// print the code string for reference
pln "code loaded: " "\n" $code1 "\n"

// load the code to current VM
loadCode $rs $code1

// check if is error, terminate if true
checkErrX $rs

// push 2 values before fast-calling function
push #i11
push #i12

// fast-call the "add1" function defined in the file "module1.qx"
fastCall :add1

// print the result pushed into the stack from the function
// unlike pop, peek only "look" but not get the value out of the stack
plo $peek

// push another value integer 5 into the stack
push #i5

// fast-call the "sub1" function defined in the file "module1.qx"
fastCall :sub1

// print the result again
plo $peek

// load text from another module file
loadText $code1 `scripts/module2.qx`

// this time, compile it first(will save some time before running)
compile $compiledT $code1

checkErrX $compiledT

// load the code and drop the result using the global variable $drop
loadCode $drop $compiledT

// there is a integer value 18 in the stack

// fast-call the "mul1" function defined in the file "module2.qx"
call $rs :mul1 #i99 $pop

// print the result
plo $rs

// terminate the program
// if without the "exit" instruction here, the program will continue to run the code loaded by module1.qx and module2.qx
exit