// 本例展示对整数或小数使用range指令遍历

// 设置一个错误处理函数用于发生错误时显示相关信息
// 错误处理代码在标号l2处开始
onError :l2

// range指令后带一个整数则表示遍历整数5，循环体代码在标号label1处
// 将依次输出每个循环序号和遍历值
// 遍历整数5相当于依次取0, 1, 2, 3, 4共5个遍历值
// 对应循环序号是0, 1, 2, 3, 4
range #i5 :label1

pln

// range指令后带两个整数表示范围遍历
// 这里是遍历整数2到5，也就是
// 依次取2, 3, 4共3个遍历值
// 对应循环序号是0, 1, 2
range #i2 #i5 :label1

pln

// range指令后带三个整数表示指定步长的范围遍历
// 这里是遍历整数20到50，步长为5，也就是
// 依次取20, 25, 30, 35, 40, 45共6个遍历值
// 对应循环序号是0, 1, 2, 3, 4, 5
range #i20 #i50 #i5 :label1

pln

// 浮点数的遍历与整数类似，注意如果不指定步长，默认步长为1.0
range #f0.2 #f1.8 #f0.4 :label1

pln

// 本例中步长为负值
// 将遍历12, 9, 6, 3, 0这5个值
// 并输出60除以这些值的结果
// 但在遍历到最后一个为0的值时，因为除数为零属于错误
// 因此会转到出错处理代码处执行，输出错误信息
range #i12 #i-3 #i-3 :label2

exit

:label1
    // 遍历与循环一样，每次遍历堆栈中将被压入序号值与遍历值
    // 注意顺序，栈顶第一个是序号值，第二个是遍历值
    pop $i
    pop $v

    pln $i -> $v

    continue

:label2

    pop $i
    pop $v

    div $rs1 #i60 $v

    pl "%v -> 60 / %v = %v" $i $v $rs1

    continue


:l2
    pop $lastLine
    pop $errMsg

    pl "代码运行到第%v行时发现错误：%v" $lastLine $errMsg

    exit