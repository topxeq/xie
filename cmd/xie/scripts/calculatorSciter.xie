// $guiG是预置的全局变量，作为GUI编程的接口对象
// 一般的图形界面操作，都通过调用该对象的各种方法来实现
// 所有GUI程序，都应该先调用guiG变量的init方法来进行图形界面环境的初始化
// 此时，如果在Windows下，如果系统中没有安装图形界面库，
// init方法将自动下载所需的动态链接库文件到主程序路径下
// 然后再进行环境初始化
mt $rs $guiG init

// 定义用于界面展示的HTML网页代码，放在htmlT变量中
// HTML和CSS代码都是标准的，脚本语言是TiScript，类似JavaScript
// 本例中定义了一个文本输入框用于输入表达式算式
// 以及“计算”和“关闭”两个按钮
// 并定义了两个按钮对应的处理脚本函数
// “计算”按钮将调用JavaScript的eval函数来进行表达式计算
// 然后将计算结果传递给谢语言代码（通过调用谢语言预定义的delegateDo函数）
// “关闭”按钮将关闭整个窗口
assign $htmlT `
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>计算器</title>
</head>
<body>
	<div style="margin-top: 10px; margin-bottom: 10px;">
		<span>请输入算式：</span>
	</div>
	<div style="margin-top: 10px; margin-bottom: 10px;">
		<input id="mainInputID" type=text />
	</div>
	<div>
		<button id="btnCal">计算</button>
		<button id="btnClose">关闭</button>
	</div>

    <script>
       function calIt() {
            Window.this.modal(<alert caption="title">提示</alert>);
            var inputT = document.getElementById("mainInputID");
			var result = eval(inputT.value);

			Window.this.xcall("delegateDo", result);

            inputT.value = result;
        }
 
        function closeWindow() {
            Window.this.close();
        }

        function test(a) {
            console.log("a:", a);
        }

        document.addEventListener('DOMContentLoaded', function() {
            console.log("文档加载完毕");

   			var buttonT = document.getElementById("btnClose");

			buttonT.addEventListener("click", closeWindow);

			document.getElementById("btnCal").addEventListener("click", calIt);

            globalThis.test = test;
        }, false);
  
    </script>
</body>
</html>
`

// 调用guiG的newWindow方法创建一个窗口
// newWindow方法需要有三个参数，第一个是窗口标题
// 第二个是字符串形式的值用于指定窗口大小，空字符串表示按默认区域
// 如果使用类似“[200,300,600,400]”的字符串，则表明窗口位于屏幕坐标（200,300）处，宽高位600*400
// 第三个参数为用于界面展示的字符串
// 结果放入变量windowT中，这是一个特殊类型的对象(后面暂称为window对象)
// 后面我们还将调用该对象的一些方法进行进一步的界面控制
mt $windowT $guiG newWindow 计算器 "" $htmlT

plo $windowT

// 用new指令创建一个快速代理函数（quickDelegate）对象dele1
// 谢语言中quickDelegate是最常用的代理函数对象
// 它创建时需要指定一个快速函数，本例中通过标号deleFast1指明
// 这样，当Sciter的网页中调用view对象的delegateDo函数时
// 就将调用deleFast1标号处的快速函数代码
new $dele1 quickDelegate :deleFast1

// 调用window对象的setDelegate方法将其接口代理指定为dele1
mt $rs $windowT setDelegate $dele1

mt $rs $windowT call test 128

// 调用window对象的show方法，此时才会真正显示界面窗口
// 并开始响应用户的操作
mt $rs $windowT show

plo $rs

// 退出程序
exit

// 用于界面事件处理的快速函数
// 约定该函数必须通过堆栈获取一个参数，并返回一个参数
// 参数均为字符串类型
// 如果传递复杂数据，常见的方法是传递JSON字符串
// 此处该函数仅仅是将输入参数输出
:deleFast1

    pop $inputT

    pl "计算结果为：%v" $inputT

    mt $rs $windowT call test 259

    // 函数返回前必须要压栈一个输出参数
    // 此处因为实际上无需返回参数，因此随便压入一个无用的数值
    push $inputT

    fastRet