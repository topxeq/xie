// 本例演示使用Windows下的WebView2（Windows 10以上自带，Win 7等可以单独安装）来制作图形化界面程序
// WebView2在Windows 10以上系统自带，Win 7等可以单独安装
// 也因此本例只在Windows下有效

// 新建一个窗口，放入变量w中
// guiG是全局预置变量，表示图形界面主控对象
// 它的newWindow方法根据指定参数创建一个新窗口
// width参数表示窗口的宽度，缺省为800
// height参数表示窗口的高度，缺省为600
// 如果带有-debug参数，表示是否允许调试（鼠标右键菜单带有“检查”等选项）
// -fix参数表示窗口不允许调整大小
// -center参数表示窗口居中
// 还有-max、-min分别表示以最大或最小化的状态展示窗口

mt $w $guiG newWindow "-title=Test WebView2" -width=1024 -height=768 -center

plo $w

// 新建一个用于窗口事件处理的快速代理函数
// 代码在标号dele1处开始
// 快速代理函数必须以fastRet指令返回
new $deleT quickDelegate :dele1

// 调用窗口对象的setQuickDelegate方法来指定代理函数
mt $rs $w setQuickDelegate $deleT

plo $rs

// 如果从网络加载网页，那么可以用下面的navigate方法
// mt $rs $w navigate http://xie.topget.org

// 本例中使用从本地加载的网页代码
// 设置准备在窗口中载入的HTML代码
// 本例中HTML页面中引入的JavaScript和CSS代码均直接用网址形式加载
= $htmlT `
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<script src="http://xie.topget.org/js/jquery.min.js"></script>
<link rel="stylesheet"  type="text/css" href="http://xie.topget.org/css/tabulator.min.css">
<script src="http://xie.topget.org/js/tabulator.min.js"></script>
<title></title>
<script>
	// 页面加载完毕后，将用alert展示一个值，然后准备数据并显示一个报表
	window.onload = function() {
		var s1 = "a信b";

		var s2 = "1\x602";
		alert(s2);

		console.log(s1.charCodeAt(0), s1.charCodeAt(1), s1.charCodeAt(2), s2, JSON.stringify(s2));

		var tabledata = [
            {id:1, name:"Oli Bob", age:"12", col:"red", dob:""},
            {id:2, name:"Mary May", age:"1", col:"blue", dob:"14/05/1982"},
            {id:3, name:"Christine Lobowski", age:"42", col:"green", dob:"22/05/1982"},
            {id:4, name:"Brendon Philips", age:"125", col:"orange", dob:"01/08/1980"},
            {id:5, name:"Margret Marmajuke", age:"16", col:"yellow", dob:"31/01/1999"},
        ];

		var table = new Tabulator("#div3", {
			height:205, // set height of table (in CSS or here), this enables the Virtual DOM and improves render speed dramatically (can be any valid css height value)
			data:tabledata, //assign data to table
			layout:"fitColumns", //fit columns to width of table (optional)
			columns:[ //Define Table Columns
				{title:"Name", field:"name", width:150},
				{title:"Age", field:"age", hozAlign:"left", formatter:"progress"},
				{title:"Favourite Color", field:"col"},
				{title:"Date Of Birth", field:"dob", sorter:"date", hozAlign:"center"},
			],
			rowClick:function(e, row){ //trigger an alert message when the row is clicked
				alert("Row " + row.getData().id + " Clicked!!!!");
			},
		});

	}

	// 点击test1按钮后，将调用quickDelegateDo函数来调用谢语言中定义的快速代理函数，并传入需要的函数
	function test1() {
		quickDelegateDo("pl", "time: %v, navigator: %v", new Date(), navigator.userAgent);
	}

	// 点击test2按钮后，将调用quickDelegateDo函数来调用谢语言中定义的快速代理函数，并alert返回的值
	function test2() {
		var rs = quickDelegateDo("showNav", "userAgent", navigator.userAgent);

		// 返回的结果是一个Promise，因此要用相应的方式获取
		rs.then(res => {
			alert("test2: "+res);
		});
	}

	// 点击test按钮后，将用Ajax方式访问一个网络API，获取结果并显示
	function test() {
		$.ajax({
			url: "http://topget.org/xms/test",
			dataType: 'text',
			type: 'POST',
			data: { 
				req: "test", 
				name: 'Tom'
			},
			success: function (data) {
				alert(data);
			},
			error: function (response) {
				console.log(JSON.stringify(response));
			}
		});

	}
</script>
</head>
<body>
<div id="div1">
	<button onclick="javascript:test();">test</button>
	<button onclick="javascript:test1();">test1</button>
	<button onclick="javascript:test2();">test2</button>
</div>
<div id="div3">
</div>
</body>
</html>
`

// 调用窗口对象的setHtml方法来设置其内容
mt $rs $w setHtml $htmlT

plo $rs

// 调用窗口对象的setHtml方法来展示窗口
// 此时窗口才真正显示
// 并且直至窗口关闭都将阻塞（即等待窗口关闭后才往下继续执行后面的代码）
mt $rs $w show

plo $rs

// 调用窗口对象的close方法关闭窗口
mt $rs $w close

plo $rs

// 结束程序的执行
// 也是为了避免如果继续往下执行将误入后面的快速代理代码
exit

// 用于网页中的快速代理函数
// 网页中的JavaScript代码中可以用quickDelegateDo函数来调用本函数
// quickDelegateDo函数中所带的参数将被封装成一个列表（数组）压入堆栈
// 快速代理函数需要将其弹栈后进行处理
:dele1
	// 弹栈出参数数组
    pop $argsT

    # pl "%#v" $argsT
    
	// 本例中，第一个参数被约定为传递一个命令
	// 后面的参数为该命令所需的参数，参数个数视该命令的需要而定
	// 因此这里从参数数组中取出第一个参数放入变量cmdT中
    getArrayItem $cmdT $argsT 0

	// 如果命令为showNav，则取后两个参数并输出其内容
    ifEqual $cmdT "showNav" :+1 :inext1
        getArrayItem $arg1 $argsT 1
        getArrayItem $arg2 $argsT 2

        pl "name: %v, value: %v" $arg1 $arg2

		// 快速处理函数最后必须返回一个值，无论是否需要
        push "showNav result"

		// 快速处理函数最后必须用fastRet指令返回
        fastRet

    :inext1
	// 如果命令为pl，则类似pl指令（其他语言中的或printf）
	// 取出后面第一个参数为格式化字串
	// 再后面都是格式化字串中所需的填充值
	// 然后输出输出
    ifEqual $cmdT "pl" :+1 :inext2
        getArrayItem $formatT $argsT 1

        slice $list1 $argsT 2 -

        pl $formatT $list1...

        push ""

        fastRet

    :inext2
	// 不支持的命令将输出错误信息
    pl "unknown command: %v" $cmdT

    push ""

    fastRet
