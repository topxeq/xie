// 给变量a赋值整数0
// 变量a将在线程中运行的并发函数中被修改
assign $a #i0

// 创建一个线程锁对象放入变量lock1中
// 指令new用于创建谢语言中一些基础数据类型或宿主语言支持的对象
// 除结果变量外第一个参数为字符串类型的对象名称
new $lock1 lock

// 定义一个并发函数体func1（用字符串形式定义）
// 并发函数使用新的虚拟机运行，因此其中的变量名称不会与主程序冲突
// 双方只能通过堆栈进行交互，例如可以传入某变量的引用
// 以便在并发函数中对其进行修改
assign $func1 `
    // 弹栈两个传入的参数，注意不是逆序弹出的而是顺序弹出的
    pop $arg1
    pop $arg2

    // 创建一个循环变量i并赋以初值0
    assign $i #i0

    // 无限循环演示不停将外部传入的变量a值加1
    // loop1是用于循环的标号
    :loop1
        // 调用传入的线程锁变量的加锁方法（lock）
        // 此处变量arg2即为外部压栈传入的线程锁对象
        // 由于lock方法没有有意义的返回值，因此用内置变量drop将其丢弃
        method $drop $arg2 lock

        // 解引用变量a的引用，以便取得a中当前的值
        unref $aNew $arg1
    
        // 将其加1，结果放入变量result中
        add $result $aNew #i1

        // 将变量arg1指向的变量（即a）中的值赋为result中的值
        // assignRef的第一个参数必须是一个引用
        assignRef $arg1 $result

        // 调用线程锁的unlock方法将其解锁，以便其他线程可以访问
        method $drop $arg2 unlock

        // 循环变量加1
        inc $i

        // 判断循环变量i的值是否大于或等于5000
        // 即循环5000次
        // 判断结果值（布尔类型）放入变量r中
        >= $r $i #i5000        


        // 如果r值为真（true），则转到标号beforeReturn处
        if $r :beforeReturn

        // 跳转到标号loop1（实现无限循环）
        goto :loop1

    :beforeReturn
        // pass指令不进行任何操作，由于标号处必须至少有一条指令
        // 因此放置一条pass指令，实际上beforeReturn这里作用是结束线程的运行
        // 因为没有后续指令了
        pass
`

// 获取变量a的引用，结果入栈
// 将被传入并发函数中以修改a中的值
ref $push $a

// 再入栈线程锁对象，以便线程中用于控制并发冲突
push $lock1

// 调用并发函数
// 第一个参数表示需要压入并发函数所使用的堆栈中的值的数量（可以是用字符串表示的数字）
// 如果不需要传递参数，第一个参数可以省略
// 第二个参数是字符串形式的并发函数代码
goFunc 2 $func1

// 再启动一个相同的线程
ref $push $a
push $lock1
goFunc 2 $func1

// 主线程中输出变量a的值
// 此时刚开始启动并发函数，变量a中的值有可能还未改变
pln main $a

// 注意，这里的标号loop1虽然与并发函数中的同名，但由于运行在不同的虚拟机中，因此不会冲突，可以看做是两个标号
:loop1

    // 休眠1秒
    sleep #f1.0

    // 输出变量a中的值查看
    // 每隔一秒应该会变成新的时间
    pln main a= $a

    // 跳转到标号loop1（实现无限循环）
    goto :loop1