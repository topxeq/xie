// 本例演示使用WebView2做图形界面时
// 获取内置的JavaScript或CSS文本嵌入HTML中
// 这样可以避免网络访问或者从附带文件中读取的麻烦
// 另外，本例也演示了如何设置普通代理函数来更安全地进行网页与谢语言后台逻辑之间的互动

// guiNewWindow是内置指令，与下面命令等效
// mt $w $guiG newWindow "-title=Test WebView2a" -width=1024 -height=768 -center -debug
// -debug参数表示打开调试功能
guiNewWindow $w "-title=Test WebView2a" -width=1024 -height=768 -center -debug

// 如果出错则停止执行
checkErrX $w

// 调用窗口对象的setDelegate方法来指定代理函数
// 之前的例子中使用的快速代理函数直接在当前虚拟机中运行，存在一定的并发冲突可能性
// 因此为安全起见，更建议使用普通代理函数
// 普通代理函数通过字符串来定义其代码
// 普通代理函数将在单独新建的虚拟机中运行
// 传入的参数通过全局变量inputG传入，是一个参数数组
// 传出的参数则应放于全局outG中返回
// 与快速代理函数不同，普通代理函数不用fastRet指令来退出，而是直接用exit指令
mt $rs $w setDelegate `
     
    getArrayItem $cmdT $inputG 0

    ifEqual $cmdT "showNav" :+1 :inext1
        getArrayItem $arg1 $inputG 1
        getArrayItem $arg2 $inputG 2

        pl "name: %v, value: %v" $arg1 $arg2

        = $outG "showNav result"

        exit

    :inext1
    ifEqual $cmdT "pl" :+1 :inext2
        getArrayItem $formatT $inputG 1

        slice $list1 $inputG 2 -

        pl $formatT $list1...

        = $outG ""

        exit

    :inext2
    pl "unknown command: %v" $cmdT

    spr $outG "unknown command: %v" $cmdT

    exit
`

= $htmlT `
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<script>TX_jquery.min.js_XT</script>
<style>TX_tabulator.min.css_XT</style>
<script>TX_tabulator.min.js_XT</script>
<title></title>
<script>
	$().ready(function (){
		var tabledata = [
            {id:1, name:"Oli Bob", age:"12", col:"red", dob:""},
            {id:2, name:"Mary May", age:"1", col:"blue", dob:"14/05/1982"},
            {id:3, name:"Christine Lobowski", age:"42", col:"green", dob:"22/05/1982"},
            {id:4, name:"Brendon Philips", age:"125", col:"orange", dob:"01/08/1980"},
            {id:5, name:"Margret Marmajuke", age:"16", col:"yellow", dob:"31/01/1999"},
        ];

		var table = new Tabulator("#div3", {
			height:205, // set height of table (in CSS or here), this enables the Virtual DOM and improves render speed dramatically (can be any valid css height value)
			data:tabledata, //assign data to table
			layout:"fitColumns", //fit columns to width of table (optional)
			columns:[ //Define Table Columns
				{title:"Name", field:"name", width:150},
				{title:"Age", field:"age", hozAlign:"left", formatter:"progress"},
				{title:"Favourite Color", field:"col"},
				{title:"Date Of Birth", field:"dob", sorter:"date", hozAlign:"center"},
			],
			rowClick:function(e, row){ //trigger an alert message when the row is clicked
				alert("Row " + row.getData().id + " Clicked!!!!");
			},
		});

	});

	function test1() {
		delegateDo("pl", "time: %v, navigator: %v", new Date(), navigator.userAgent);
	}

	function test2() {
		var rs = delegateDo("showNav", "userAgent", navigator.userAgent);

		// 返回的结果是一个Promise，因此要用相应的方式获取
		rs.then(res => {
			alert("test2: "+res);
		});
	}
</script>
</head>
<body>
<div id="div1">
	<button onclick="javascript:test1();">test1</button>
	<button onclick="javascript:test2();">test2</button>
</div>
<div id="div3" style="margin-top: 1.0em;">
</div>
</body>
</html>
`

// 提示：使用getResourceList指令可以看到所有内置的资源
getResource $t1 "js/jquery.min.js"

strReplace $htmlT $htmlT "TX_jquery.min.js_XT" $t1

getResource $t2 "css/tabulator.min.css"

strReplace $htmlT $htmlT "TX_tabulator.min.css_XT" $t2

getResource $t3 "js/tabulator.min.js"

strReplace $htmlT $htmlT "TX_tabulator.min.js_XT" $t3

mt $rs $w setHtml $htmlT

checkErrX $rs

mt $rs $w show

checkErrX $rs

mt $rs $w close

exit


